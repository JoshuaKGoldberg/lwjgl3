<!--
  ~ Copyright LWJGL. All rights reserved.
  ~ License terms: https://www.lwjgl.org/license
  -->
<project name="native-android" basedir="../.." xmlns:if="ant:if" xmlns:unless="ant:unless">
	<import file="../build-definitions.xml"/>

	<property name="ndk.home" value="${env.ANDROID_SDK_HOME}/ndk-bundle"/>

	<condition property="ndk.arch" value="arm64" else="arm">
		<isset property="build.arch.64"/>
	</condition>

	<condition property="ndk.toolchain" value="aarch64-linux-android" else="arm-linux-androideabi">
		<isset property="build.arch.64"/>
	</condition>

	<property name="src.native.rel" value="../../../../${src.native}"/>

	<macrodef name="compile">
		<attribute name="dest"/>
		<attribute name="lang" default="c"/>
		<attribute name="flags"/>
		<attribute name="relative" default="true"/>
		<element name="source" implicit="true"/>
		<sequential>
			<local name="cpp"/>
			<condition property="cpp"><equals arg1="@{lang}" arg2="c++"/></condition>

			<mkdir dir="@{dest}"/>
			<apply dir="@{dest}" executable="${ndk.bin}/${ndk.toolchain}-gcc" dest="@{dest}" skipemptyfilesets="true" failonerror="true" parallel="true" taskname="Compiler">
				<arg line="-c -std=c11" unless:set="cpp"/>
				<arg line="-c -std=c++11" if:set="cpp"/>
				<arg line="-march=armv7-a -mthumb -mfloat-abi=softfp -mfpu=neon" if:set="build.arch.32"/>
				<arg line="-O3 -flto -fPIC @{flags} -pthread -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -D_XOPEN_SOURCE=700 -DNDEBUG -DLWJGL_LINUX -DLWJGL_ANDROID -DLWJGL${build.arch.bits}"/>

				<arg line="--sysroot=${ndk.home}/platforms/android-${android.platform}/arch-${ndk.arch}"/>

				<arg value="-I${src.native.rel}/system"/>
				<arg value="-I${src.native.rel}/system/linux"/>

				<source/>

				<regexpmapper from="(\w+)\.cc?" to="\1.o"/>
			</apply>
		</sequential>
	</macrodef>

	<macrodef name="build">
		<attribute name="name"/>
		<attribute name="dest"/>
		<attribute name="lang" default="c"/>
		<attribute name="flags" default="-Werror -Wfatal-errors -Wall -Wextra -pedantic -Wno-extended-offsetof"/>
		<element name="beforeCompile" optional="true"/>
		<element name="source"/>
		<element name="beforeLink" optional="true"/>
		<element name="link" optional="true"/>
		<sequential>
			<beforeCompile/>
			<compile dest="@{dest}" lang="@{lang}" flags="@{flags}">
				<source/>
			</compile>

			<local name="lib-uptodate"/>
			<uptodate property="lib-uptodate" targetfile="${lib}/lib@{name}.so">
				<srcfiles file="config/${build.platform}/build.xml"/>
				<srcfiles dir="@{dest}" includes="**"/>
			</uptodate>

			<local name="version.script"/>
			<property name="version.script" location="config/android/version.script" relative="true"/>

			<echo message="Linking @{name}" taskname="gcc" unless:set="lib-uptodate"/>
			<beforeLink/>
			<apply executable="${ndk.bin}/${ndk.toolchain}-gcc" failonerror="true" parallel="true" taskname="Linker" unless:set="lib-uptodate">
				<srcfile/>
				<arg value="-shared"/>
				<arg line="--sysroot=${ndk.home}/platforms/android-${android.platform}/arch-${ndk.arch}"/>
				<arg line="-z noexecstack"/>
				<arg line="-march=armv7-a -Wl,--fix-cortex-a8" if:set="build.arch.32"/>
				<arg line="-O3 -flto -fPIC -pthread -o ${lib}/lib@{name}.so"/>

				<arg line="-Wl,--version-script,${version.script}"/>
				<fileset dir="@{dest}" includes="*.o"/>
				<link/>
			</apply>

			<apply executable="${ndk.bin}/${ndk.toolchain}-strip" failonerror="true" taskname="Symbol strip" unless:set="lib-uptodate">
				<filelist dir="${lib}" files="lib@{name}.so"/>
			</apply>
			<delete file="${lib}/touch_android_${build.arch}.txt" quiet="true" unless:set="lib-uptodate"/>
		</sequential>
	</macrodef>

	<target name="compile-native-platform">
		<script language="nashorn">
		var Paths = Java.type("java.nio.file.Paths");
		var Files = Java.type("java.nio.file.Files");

		var toolchain = LWJGL.getProperty("ndk.toolchain");
		var root = Files.list(Paths.get(LWJGL.getProperty("ndk.home") + "/toolchains"))
			.filter(function(it) { return it.getFileName().toString().startsWith(toolchain); })
			.findFirst()
			.get();

		var version = root.getFileName().toString();
		LWJGL.setProperty(
			"ndk.gcc.version",
			version.substring(version.lastIndexOf('-') + 1)
		);

		LWJGL.setProperty("ndk.bin", Paths.get(
			Files
				.list(Paths.get(root, "prebuilt"))
				.findFirst()
				.get(),
			"bin"
		).toString());
		</script>
		<property name="ndk.gcc.version" value=""/>
		<property name="ndk.bin" value=""/>

		<parallel threadsPerProcessor="2" failonany="true">

		<!-- CORE -->
		<build name="lwjgl" dest="${bin.native}/core">
			<source>
				<arg value="-I${src.native.rel}/system/dyncall"/>
				<fileset dir=".">
					<include name="${src.native}/system/*.c"/>
					<exclude name="${src.native}/system/lwjgl_malloc.c"/>
					<include name="${src.generated.native}/system/*.c"/>
					<include name="${src.generated.native}/system/dyncall/*.c"/>
					<include name="${src.generated.native}/system/jawt/*.c" if:true="${binding.jawt}"/>
					<include name="${src.generated.native}/system/jni/*.c"/>
					<include name="${src.generated.native}/system/libc/*.c"/>
					<include name="${src.generated.native}/system/linux/*.c"/>
				</fileset>
			</source>
			<beforeLink>
				<mkdir dir="${lib}/android/${build.arch}"/>
				<parallel threadsPerProcessor="2" failonany="true" unless:set="lib-uptodate">
					<update-dependency name="dyncall" artifact="${build.arch}/libdyncall_s.a"/>
					<update-dependency name="dyncallback" artifact="${build.arch}/libdyncallback_s.a"/>
					<update-dependency name="dynload" artifact="${build.arch}/libdynload_s.a"/>
				</parallel>
			</beforeLink>
			<link>
				<fileset dir="${lib}/android/${build.arch}/">
					<include name="libdyn*.a"/>
				</fileset>
			</link>
		</build>

		<!-- LMDB -->
		<build name="lwjgl_lmdb" dest="${bin.native}/lmdb" if:true="${binding.lmdb}">
			<beforeCompile>
				<compile dest="@{dest}" flags="-Wno-format-extra-args">
					<arg value="-I${src.native.rel}/util/lmdb"/>
					<arg value="-DMDB_USE_ROBUST=0"/>
					<fileset dir="." includes="${src.native}/util/lmdb/*.c"/>
				</compile>
			</beforeCompile>
			<source>
				<arg value="-I${src.native.rel}/util/lmdb"/>
				<fileset dir="." includes="${src.generated.native}/util/lmdb/*.c"/>
			</source>
		</build>

		<!-- NanoVG -->
		<build name="lwjgl_nanovg" dest="${bin.native}/nanovg" if:true="${binding.nanovg}">
			<source>
				<arg value="-I${src.native.rel}/nanovg"/>
				<arg value="-isystem${src.native.rel}/stb"/>
				<fileset dir="." includes="${src.native}/system/lwjgl_malloc.c"/>
				<fileset dir="." includes="${src.generated.native}/nanovg/*.c"/>
			</source>
		</build>

		<!-- Nuklear -->
		<build name="lwjgl_nuklear" dest="${bin.native}/nuklear" if:true="${binding.nuklear}">
			<source>
				<arg value="-I${src.native.rel}/nuklear"/>
				<fileset dir="." includes="${src.generated.native}/nuklear/*.c"/>
			</source>
		</build>

		<!-- OpenGL -->
		<build name="lwjgl_opengl" dest="${bin.native}/opengl" if:true="${binding.opengl}">
			<source>
				<arg value="-I${src.native.rel}/opengl"/>
				<fileset dir="." includes="${src.generated.native}/opengl/*.c"/>
			</source>
		</build>

		<!-- OpenGL ES -->
		<build name="lwjgl_opengles" dest="${bin.native}/opengles" if:true="${binding.opengles}">
			<source>
				<arg value="-I${src.native.rel}/opengles"/>
				<fileset dir="." includes="${src.generated.native}/opengles/*.c"/>
			</source>
		</build>

		<!-- OpenVR -->
		<build name="lwjgl_openvr" dest="${bin.native}/openvr" if:true="${binding.openvr}">
			<source>
				<fileset dir="." includes="${src.generated.native}/openvr/*.c"/>
			</source>
		</build>

		<!-- ParShapes -->
		<build name="lwjgl_par" dest="${bin.native}/par" if:true="${binding.par}">
			<source>
				<arg value="-I${src.native.rel}/util/par"/>
				<fileset dir="." includes="${src.native}/system/lwjgl_malloc.c"/>
				<fileset dir="." includes="${src.generated.native}/util/par/*.c"/>
			</source>
		</build>

		<!-- stb -->
		<build name="lwjgl_stb" dest="${bin.native}/stb" if:true="${binding.stb}">
			<source>
				<arg value="-isystem${src.native.rel}/stb"/>
				<fileset dir="." includes="${src.native}/system/lwjgl_malloc.c"/>
				<fileset dir="." includes="${src.generated.native}/stb/*.c"/>
			</source>
		</build>

		<!-- tinyexr -->
		<build name="lwjgl_tinyexr" dest="${bin.native}/tinyexr" if:true="${binding.tinyexr}">
			<beforeCompile>
				<compile dest="@{dest}" lang="c++" flags="">
					<arg line="-isystem${ndk.home}/sources/cxx-stl/gnu-libstdc++/${ndk.gcc.version}/include" if:set="cpp"/>
					<arg line="-isystem${ndk.home}/sources/cxx-stl/gnu-libstdc++/${ndk.gcc.version}/libs/${build.arch}/include" if:set="cpp"/>
					<arg value="-I${src.native.rel}/util/tinyexr"/>
					<fileset dir="." includes="${src.native}/util/tinyexr/*.cc"/>
				</compile>
			</beforeCompile>
			<source>
				<arg value="-I${src.native.rel}/util/tinyexr"/>
				<fileset dir="." includes="${src.generated.native}/util/tinyexr/*.c"/>
			</source>
		</build>

		<!-- xxHash -->
		<build name="lwjgl_xxhash" dest="${bin.native}/xxhash" if:true="${binding.xxhash}">
			<source>
				<arg value="-I${src.native.rel}/system"/>
				<arg value="-I${src.native.rel}/util/xxhash"/>
				<fileset dir="." includes="${src.native}/system/lwjgl_malloc.c"/>
				<fileset dir="." includes="${src.generated.native}/util/xxhash/*.c"/>
			</source>
		</build>

		<!-- yoga -->
		<build name="lwjgl_yoga" dest="${bin.native}/yoga" if:true="${binding.yoga}">
			<beforeCompile>
				<compile dest="@{dest}" flags="">
					<arg value="-I${src.native.rel}/util/yoga"/>
					<fileset dir="." includes="${src.native}/util/yoga/*.c"/>
				</compile>
			</beforeCompile>
			<source>
				<arg value="-I${src.native.rel}/util/yoga"/>
				<fileset dir="." includes="${src.generated.native}/util/yoga/*.c"/>
			</source>
		</build>

		</parallel>

		<local name="native-dependencies-uptodate"/>
		<condition property="native-dependencies-uptodate" value="true">
			<or>
				<istrue value="${build.offline}"/>
				<resourceexists>
					<file file="${lib}/touch_android_${build.arch}.txt"/>
				</resourceexists>
			</or>
		</condition>

		<sequential unless:set="native-dependencies-uptodate">
			<mkdir dir="${lib}/android/${build.arch}"/>

			<parallel threadsPerProcessor="4" failonany="true">

			<!--<update-dependency name="Assimp" artifact="${build.arch}/libassimp.so" dest="${lib}" if:true="${binding.assimp}"/>-->
			<!--<update-dependency name="bgfx" artifact="${build.arch}/libbgfx.so" dest="${lib}" if:true="${binding.bgfx}"/>-->
			<!--<update-dependency name="jemalloc" artifact="${build.arch}/libjemalloc.so" dest="${lib}" if:true="${binding.jemalloc}"/>-->
			<!--<update-dependency name="OpenAL32" artifact="${build.arch}/libopenal.so" dest="${lib}" if:true="${binding.openal}"/>-->
			<!--<update-dependency name="OpenVR" artifact="${build.arch}/libopenvr_api.so" dest="${lib}" if:true="${binding.openvr}"/>-->

			</parallel>

			<touch file="${lib}/touch_android_${build.arch}.txt" verbose="false"/>
		</sequential>
	</target>
</project>